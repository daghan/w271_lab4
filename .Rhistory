#  ggtsdisplay
#par(mfrow=c(2,2))
#plot(residuals1)
#plot white noise next to residuals for comparison
#w=rnorm(300,0,1)
#annoying - look this up in class notes
#white_noise <- arima.sim(300, order=c(0,0,0))
#white_noise = arima(w,order=c(0,0,0))
#plot.ts(w, main="Simulated White Noise")
#seasonal coefficients are not stat significant, but cannot reject null hypothesis that residuals are independent of each other
fit5 <- Arima(time_series_subset, order=c(1,1,1), seasonal = list(order =c(1,1,1), period=12))
residuals5 <- residuals(fit5)
checkresiduals(fit5)
summary(fit5)
fit5.fcast <- forecast(fit5, h=11)
#plot(fit5.fcast)
#non-seasonal coefficients are stat significant, seasonal ar term is not significant, but cannot reject null hypothesis that residuals are independent of each other
fit4 <- Arima(time_series_subset, order=c(1,1,1), seasonal = list(order =c(0,1,1), period=12))
residuals4 <- residuals(fit4)
checkresiduals(fit4)
summary(fit4)
fit4.fcast <- forecast(fit4, h=11)
plot(fit4.fcast)
#non-seasonal coefficients are not stat significant, but cannot reject null hypothesis that residuals are independent of each other
fit3 <- Arima(time_series_subset, order=c(2,1,2), seasonal = list(order =c(1,1,1), period=12))
residuals3 <- residuals(fit3)
checkresiduals(fit3)
summary(fit3)
fit3.fcast <- forecast(fit3, h=11)
#plot(fit3.fcast)
predicted_fit5 <- fit5.fcast$mean[1:11]
hold_out <- full_time_series['2015-01-01/2015-11-01']
combo <- as.data.frame(hold_out$x)
combo$predicted <- predicted_fit5
#View(combo)
print(hold_out)
print(predicted_fit5)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fita <- fita.fcast$mean[1:11]
combo$predicted <- predicted_fita
#View(combo)
print(hold_out)
print(predicted_fita)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit1 <- fit1.fcast$mean[1:11]
combo$predicted <- predicted_fit1
#View(combo)
print(hold_out)
print(predicted_fit1)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit2 <- fit2.fcast$mean[1:11]
combo$predicted <- predicted_fit2
#View(combo)
print(hold_out)
print(predicted_fit2)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit3 <- fit3.fcast$mean[1:11]
combo$predicted <- predicted_fit3
#View(combo)
print(hold_out)
print(predicted_fit3)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit4 <- fit4.fcast$mean[1:11]
combo$predicted <- predicted_fit4
#View(combo)
print(hold_out)
print(predicted_fit4)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit6 <- fit6.fcast$mean[1:11]
combo$predicted <- predicted_fit6
#View(combo)
print(hold_out)
print(predicted_fit4)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit7 <- fit7.fcast$mean[1:11]
combo$predicted <- predicted_fit7
#View(combo)
print(hold_out)
print(predicted_fit7)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit8 <- fit8.fcast$mean[1:11]
combo$predicted <- predicted_fit8
#View(combo)
print(hold_out)
print(predicted_fit8)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
#subset last year's data from the same monthly time period as the test data
last_year <- full_time_series['2014-01-01/2014-11-01']
#View(last_year)
#extract data only (no index) from time series object for test data and last year's data
values_testdata <-coredata(hold_out)
values_lastyear <- coredata(last_year)
#View(df_values_testdata)
naive_seasonal<- cbind(values_testdata, values_lastyear)
#class(values_testdata)
head(naive_seasonal)
df_naive_seasonal <- as.data.frame(naive_seasonal)
#class(df_naive_seasonal)
#View(df_naive_seasonal)
colnames(df_naive_seasonal) <- c("test_data","lastyear_data")
head(df_naive_seasonal)
df_naive_seasonal$absolute_percent_error <- (abs(df_naive_seasonal$lastyear_data - df_naive_seasonal$test_data) *100) / df_naive_seasonal$lastyear_data
head(df_naive_seasonal)
mean(df_naive_seasonal$absolute_percent_error)
predicted_fit4 <- fit4.fcast$mean[1:11]
combo$predicted <- predicted_fit4
View(combo)
print(hold_out)
print(predicted_fit4)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
summary(fit5.fcast)
#predicted_fit5 <- fit5.fcast$mean[1:11]
hold_out <- full_time_series['2015-01-01/2015-11-01']
combo <- as.data.frame(hold_out$x)
#combo$predicted <- predicted_fit5
View(combo)
hold_out <- full_time_series['2015-01-01/2015-11-01']
View(hold_out)
combo <- as.data.frame(hold_out$x)
#combo$predicted <- predicted_fit5
#View(combo)
hold_out <- full_time_series['2015-01-01/2015-11-01']
head(hold_out)
combo <- as.data.frame(hold_out$x)
combo$predicted <- predicted_fit5
head(combo)
df <- read.csv("Lab4-series2.csv",header = TRUE)
df.ts <- ts(df[,2], start = 1990, frequency = 12)
str(df.ts)
time(df.ts)
df <- read.csv("Lab4-series2.csv",header = TRUE)
df <- read.csv("Lab4-series2.csv",header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("Lab4-series2.csv",header = TRUE)
df <- read.csv("Lab4-series2.csv",header = TRUE)
df.ts <- ts(df[,2], start = 1990, frequency = 12)
str(df.ts)
time(df.ts)
train.ts <- window(df.ts, start = c(1990,1), end=c(2014,12), freq = 12)
test.ts <- window(df.ts, start=c(2015,1), freq=12)
df <- read.csv("Lab4-series2.csv",header = TRUE)
df.ts <- ts(df[,2], start = 1990, frequency = 12)
str(df.ts)
#time(df.ts)
train.ts <- window(df.ts, start = c(1990,1), end=c(2014,12), freq = 12)
test.ts <- window(df.ts, start=c(2015,1), freq=12)
df <- read.csv("Lab4-series2.csv",header = TRUE)
df.ts <- ts(df[,2], start = 1990, frequency = 12)
str(df.ts)
#time(df.ts)
train.ts <- window(df.ts, start = c(1990,1), end=c(2014,12), freq = 12)
test.ts <- window(df.ts, start=c(2015,1), freq=12)
test.ts
knitr::opts_chunk$set(cache=TRUE)
library(knitr)
library(xts)
library(forecast)
library(ggfortify)
library(ggplot2)
library(dplyr)
library(plotly)
library(Hmisc)
library(tseries)
library(stats)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
rm(list=ls())
setwd("/Users/daghanaltas/Hacking/Berkeley/W271/Labs/w271_lab4")
#setwd("/Users/daghanaltas/Hacking/Berkeley/W271/Labs/w271_lab4")
df <- read.csv("./Lab4-series2.csv")
rbind(head(df), tail(df))
str(df)
describe(df)
ms <- as.xts(ts(df$x, start = c(1990,1), frequency = 12))
ms.training <- ms['/2014']
rbind(head(ms.training), tail(ms.training))
ms.test <- ms['2015/']
ms.training %>% autoplot()
ms.training %>% ggtsdisplay
ms.training.1d <- diff(ms.training, lag = 1)
ms.training.4d <- diff(ms.training, lag = 4)
ms.training.12d <- diff(ms.training, lag = 12)
ms.training.1d.4d <- diff(diff(ms.training, lag = 1), lag = 4)
ms.training.1d.12d <- diff(diff(ms.training, lag = 1), lag = 12)
#prunning the NAs
ms.training.1d <- ms.training.1d[!is.na(ms.training.1d)]
ms.training.4d <- ms.training.4d[!is.na(ms.training.4d)]
ms.training.12d <- ms.training.12d[!is.na(ms.training.12d)]
ms.training.1d.4d <- ms.training.1d.4d[!is.na(ms.training.1d.4d)]
ms.training.1d.12d <- ms.training.1d.12d[!is.na(ms.training.1d.12d)]
ms.training.1d %>% ggtsdisplay
ms.training.4d %>% ggtsdisplay
ms.training.12d %>% ggtsdisplay
ms.training.1d.4d %>% ggtsdisplay
ms.training.1d.12d %>% ggtsdisplay
adf.test(ms.training.1d)
adf.test(ms.training.4d)
adf.test(ms.training.12d)
adf.test(ms.training.1d.4d)
adf.test(ms.training.1d.12d)
# ARIMA(0,1,0)(0,1,1)[12]
ms.training %>% Arima(order = c(0, 1, 0), seasonal=list(order=c(0,1,1),period=12)) %>% residuals %>% ggtsdisplay
# ARIMA(2,1,0)(0,1,1)[12]
ms.training %>% Arima(order = c(2, 1, 0), seasonal=list(order=c(0,1,1),period=12)) %>% residuals %>% ggtsdisplay
# ARIMA(2,1,5)(0,1,1)[12]
ms.training %>% Arima(order = c(2, 1, 5), seasonal=list(order=c(0,1,1),period=12)) %>% residuals %>% ggtsdisplay
# ARIMA(5,1,0)(0,1,1)[12]
ms.training %>% Arima(order = c(5, 1, 0), seasonal=list(order=c(0,1,1),period=12)) %>% residuals %>% ggtsdisplay
# ARIMA(2,1,5)(0,1,1)[12]
ms.training %>% Arima(order = c(2, 1, 5), seasonal=list(order=c(0,1,1),period=12)) %>% ggtsdiag()
# ARIMA(5,1,0)(0,1,1)[12]
ms.training %>% Arima(order = c(5, 1, 0), seasonal=list(order=c(0,1,1),period=12)) %>% ggtsdiag()
# ARIMA(2,1,5)(0,1,1)[12]
ms.training %>% Arima(order = c(2, 1, 5), seasonal=list(order=c(0,1,1),period=12)) %>% summary()
# ARIMA(5,1,0)(0,1,1)[12]
ms.training %>% Arima(order = c(5, 1, 0), seasonal=list(order=c(0,1,1),period=12)) %>% summary()
results <- data.frame(p = 1:25, q = 1:25, AIC = 0, AICc = 0, BIC = 0)
for (p in 1:5){
for (q in 1:5){
m <- ms.training %>% Arima(order = c(p, 1, q), seasonal=list(order=c(0,1,1),period=12))
index <- (p-1)*5 + q
results[index,] = c(p,q,m$aic, m$aicc, m$bic)
}
}
results[which.min(results$AIC),]
results[which.min(results$AICc),]
results[which.min(results$BIC),]
series.ts %>% ggmonthplot
library(xts)
library(ggplot2)
library(zoo)
library(fpp2)
library(forecast)
library(astsa)
library(dplyr)
library(Hmisc)
library(plotly)
library(lattice)
library(tseries)
time_series = read.csv("Lab4-series2.csv", header=TRUE, stringsAsFactors = FALSE)
summary(time_series)
str(time_series)
length(time_series$X)
names(time_series)
head(time_series, 25)
tail(time_series, 25)
time_series_index <- seq(as.Date("1990/1/1"), by="month", length.out = length(time_series[,1]))
time_series_xts <- xts(time_series, order.by = time_series_index)
full_time_series <- time_series_xts[,-1]
subset_data<- time_series_xts['1990-01-01/2014-12-01']
time_series_subset <- subset_data[,-1]
#View(time_series_subset)
autoplot(time_series_subset)
further_subset_data<- time_series_subset['1996-01-01/1997-12-01']
autoplot(further_subset_data)
series.ts <- ts(time_series[1:300,2], start=1990, freq=12)
series.ts %>% ggmonthplot
series.ts %>% diff() %>% ggmonthplot
series.ts %>% diff() %>% diff(lag=12) %>% ggmonthplot
series.ts %>% diff(lag=12) %>% ggmonthplot
trend_diff = diff(time_series_subset)
plot(trend_diff)
hist(trend_diff)
adf.test(time_series_subset, alternative="stationary",k=1)
season_diff_only = diff(time_series_subset, 12)
plot(season_diff_only)
hist(season_diff_only)
Acf(season_diff_only)
Pacf(season_diff_only)
adf.test(time_series_subset, alternative="stationary",k=12)
fit6 <- Arima(time_series_subset, order=c(1,0,0), seasonal = list(order =c(1,1,0), period=12))
residuals6 <- residuals(fit6)
checkresiduals(fit6)
summary(fit6)
fit6.fcast <- forecast(fit6, h=11)
#plot(fit6.fcast)
fit7 <- Arima(time_series_subset, order=c(3,0,0), seasonal = list(order =c(1,1,0), period=12))
residuals7 <- residuals(fit7)
checkresiduals(fit7)
summary(fit7)
fit7.fcast <- forecast(fit7, h=11)
#plot(fit7.fcast)
fit8 <- Arima(time_series_subset, order=c(6,0,0), seasonal = list(order =c(1,1,0), period=12))
residuals8 <- residuals(fit8)
checkresiduals(fit8)
summary(fit8)
fit8.fcast <- forecast(fit8, h=11)
#plot(fit8.fcast)
predicted_fit8 <- fit8.fcast$mean[1:11]
combo$predicted <- predicted_fit8
predicted_fit2 <- fit2.fcast$mean[1:11]
knitr::opts_chunk$set(echo = TRUE)
library(xts)
library(ggplot2)
library(zoo)
library(fpp2)
library(forecast)
library(astsa)
library(dplyr)
library(Hmisc)
library(plotly)
library(lattice)
library(tseries)
time_series = read.csv("Lab4-series2.csv", header=TRUE, stringsAsFactors = FALSE)
summary(time_series)
str(time_series)
length(time_series$X)
names(time_series)
head(time_series, 25)
tail(time_series, 25)
time_series_index <- seq(as.Date("1990/1/1"), by="month", length.out = length(time_series[,1]))
time_series_xts <- xts(time_series, order.by = time_series_index)
full_time_series <- time_series_xts[,-1]
subset_data<- time_series_xts['1990-01-01/2014-12-01']
time_series_subset <- subset_data[,-1]
#View(time_series_subset)
autoplot(time_series_subset)
further_subset_data<- time_series_subset['1996-01-01/1997-12-01']
autoplot(further_subset_data)
series.ts <- ts(time_series[1:300,2], start=1990, freq=12)
series.ts %>% ggmonthplot
series.ts %>% diff() %>% ggmonthplot
series.ts %>% diff(lag=12) %>% ggmonthplot
series.ts %>% diff() %>% diff(lag=12) %>% ggmonthplot
trend_diff = diff(time_series_subset)
plot(trend_diff)
hist(trend_diff)
adf.test(time_series_subset, alternative="stationary",k=1)
Acf(trend_diff)
Pacf(trend_diff)
season_diff = diff(trend_diff, 12)
plot(season_diff)
hist(season_diff)
ggAcf(season_diff)
ggPacf(season_diff)
season_diff_only = diff(time_series_subset, 12)
plot(season_diff_only)
hist(season_diff_only)
Acf(season_diff_only)
Pacf(season_diff_only)
adf.test(time_series_subset, alternative="stationary",k=12)
second_season_diff = diff(season_diff_only, 12)
plot(second_season_diff)
hist(second_season_diff)
Acf(second_season_diff)
Pacf(second_season_diff)
#most of coefficients not stat sign, but cannot reject Ho that residuals are independent
fit1 <- Arima(time_series_subset, order=c(3,1,3), seasonal = list(order =c(0,1,1), period=12))
residuals1 <- residuals(fit1)
checkresiduals(fit1)
summary(fit1)
fit1.fcast <- forecast(fit1, h=11)
plot(fit1.fcast)
#time_series_subset %>%
#  Arima(order=c(2,1,2), seasonal= list(order =c(2,1,2), period=12)) %>%
#  residuals %>%
#  ggtsdisplay
#par(mfrow=c(2,2))
#plot(residuals1)
#plot white noise next to residuals for comparison
#w=rnorm(300,0,1)
#annoying - look this up in class notes
#white_noise <- arima.sim(300, order=c(0,0,0))
#white_noise = arima(w,order=c(0,0,0))
#plot.ts(w, main="Simulated White Noise")
#coefficients are all stat significant, cannot reject null hypothesis that residuals are independent of each other
fit2 <- Arima(time_series_subset, order=c(2,1,2), seasonal = list(order =c(0,1,1), period=12))
residuals2 <- residuals(fit2)
checkresiduals(fit2)
summary(fit2)
fit2.fcast <- forecast(fit2, h=11)
#plot(fit2.fcast)
#lines(fitted(fit2), col="purple")
#non-seasonal coefficients are not stat significant, but cannot reject null hypothesis that residuals are independent of each other
fit3 <- Arima(time_series_subset, order=c(2,1,2), seasonal = list(order =c(1,1,1), period=12))
residuals3 <- residuals(fit3)
checkresiduals(fit3)
summary(fit3)
fit3.fcast <- forecast(fit3, h=11)
#plot(fit3.fcast)
#non-seasonal coefficients are stat significant, seasonal ar term is not significant, but cannot reject null hypothesis that residuals are independent of each other
fit4 <- Arima(time_series_subset, order=c(1,1,1), seasonal = list(order =c(0,1,1), period=12))
residuals4 <- residuals(fit4)
checkresiduals(fit4)
summary(fit4)
fit4.fcast <- forecast(fit4, h=11)
plot(fit4.fcast)
#seasonal coefficients are not stat significant, but cannot reject null hypothesis that residuals are independent of each other
fit5 <- Arima(time_series_subset, order=c(1,1,1), seasonal = list(order =c(1,1,1), period=12))
residuals5 <- residuals(fit5)
checkresiduals(fit5)
summary(fit5)
fit5.fcast <- forecast(fit5, h=11)
#plot(fit5.fcast)
#plot.ts(full_time_series)
#lines(fitted(fit1), col="purple")
#the below dont do anything
#lines(fit1$residuals, col="red")
#lines(fit1$fcast, col="purple")
#fit1 %>% forecast(h=11) %>% autoplot
#autoplot(forecast(fit1, h=11))
#autoplot(full_time_series, col="purple")
#plot(fit1.fcast)
#lines(fitted(fit1), col="purple")
#why cant i plot the real time series ontop of the forecast!!!!?????
#lines(full_time_series, add=T)
#this does a crappy job at forecasting and we can reject the null hypothesis that the residuals are independent of each other (we don't want to).
fita <- auto.arima(time_series_subset, stepwise=FALSE, approximation=FALSE)
residualsa <- residuals(fita)
checkresiduals(fita)
summary(fita)
plot(fitted(fita))
plot(residuals(fita))
fita.fcast <- forecast(fita, h=11)
plot(fita.fcast)
#fit auto.arima on seasonal differenced only data.
fitb <- auto.arima(season_diff_only, stepwise=FALSE, approximation=FALSE)
residualsa <- residuals(fitb)
checkresiduals(fitb)
summary(fitb)
plot(fitted(fitb))
plot(residuals(fitb))
#fit auto.arima on trend and seasonal differenced only data.
fitc <- auto.arima(season_diff, stepwise=FALSE, approximation=FALSE)
residualsc <- residuals(fitc)
checkresiduals(fitc)
summary(fitc)
plot(fitted(fitc))
plot(residuals(fitc))
fit6 <- Arima(time_series_subset, order=c(1,0,0), seasonal = list(order =c(1,1,0), period=12))
residuals6 <- residuals(fit6)
checkresiduals(fit6)
summary(fit6)
fit6.fcast <- forecast(fit6, h=11)
#plot(fit6.fcast)
fit7 <- Arima(time_series_subset, order=c(3,0,0), seasonal = list(order =c(1,1,0), period=12))
residuals7 <- residuals(fit7)
checkresiduals(fit7)
summary(fit7)
fit7.fcast <- forecast(fit7, h=11)
#plot(fit7.fcast)
fit8 <- Arima(time_series_subset, order=c(6,0,0), seasonal = list(order =c(1,1,0), period=12))
residuals8 <- residuals(fit8)
checkresiduals(fit8)
summary(fit8)
fit8.fcast <- forecast(fit8, h=11)
#plot(fit8.fcast)
#below are SARIMA
fit1$aicc
fit2$aicc
fit3$aicc
fit4$aicc
fit5$aicc
#below are AR models with integrated AR seasonal comonent
fit6$aicc
fit7$aicc
fit8$aicc
#below are the autoplot generated possibilites
fita$aicc
fitb$aicc
fitc$aicc
#hold out data
hold_out <- full_time_series['2015-01-01/2015-11-01']
#View(hold_out)
model_fullseries_5 <- Arima(full_time_series, order=c(1,1,1), seasonal = list(order =c(0,1,1), period=12))
residuals5 <- residuals(model_fullseries_5)
checkresiduals(model_fullseries_5)
summary(model_fullseries_5)
hold_out <- full_time_series['2015-01-01/2015-11-01']
head(hold_out)
combo <- as.data.frame(hold_out$x)
combo$predicted <- predicted_fit5
predicted_fit2 <- fit2.fcast$mean[1:11]
combo$predicted <- predicted_fit2
#View(combo)
print(hold_out)
print(predicted_fit2)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
predicted_fit8 <- fit8.fcast$mean[1:11]
combo$predicted <- predicted_fit8
#View(combo)
print(hold_out)
print(predicted_fit8)
combo$absolute_percent_error <- (abs(combo$x - combo$predicted)/combo$x)*100
#View(combo)
mean(combo$absolute_percent_error)
#{r setup, warning=FALSE, message=FALSE, size="tiny"}
#knitr::opts_chunk$set(cache=TRUE)
library(easypackages)
packages("knitr","xts","forecast","ggfortify","ggplot2", "dplyr","plotly", "Hmisc",
"tseries","stats","fpp", "forcats")
